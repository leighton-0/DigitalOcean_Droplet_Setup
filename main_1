#!/bin/bash

#######################################################################
##             DigitalOcean Droplet - Basic Set Up Script           ##
#######################################################################
# To loginto a droplet from WSL ==> ssh root@<IP>

# to install:-
#   need to first install curl ==> apt install curl
#   then:-
#   curl -k -s https://raw.githubusercontent.com/leighton-0/DigitalOcean_Droplet_Setup/main/main_1 | bash

echo "START OF SCRIPT"
s=3                  # Slows scritpt down so you can see whats going on

printf '\n============================================================\n'
printf '[+] Updating System\n'
printf '============================================================\n\n'
sleep $s
apt update && apt upgrade -y && apt autoremove -y

printf '\n============================================================\n'
printf '[+] Install Misc\n'
printf '============================================================\n\n'
sleep $s
apt install wget -y
apt install ruby -y
apt install git -y
apt install build-essential libcurl4-openssl-dev libxml2 libxml2-dev libxslt1-dev ruby-dev  libgmp-dev zlib1g-dev -y
apt install nmap -y
apt install whois -y
apt install dnsutils -y              # dig & nslookup
apt install tree
apt install figlet toilet            # install figlet for banners
apt install neofetch -y
apt install cmatrix -y

printf '\n============================================================\n'
printf '[+] Install tmux ref & custom config https://github.com/hamvocke/dotfiles/tree/master/tmux\n'
printf '============================================================\n\n'
sleep $s
apt install tmux -y
# wget https://raw.githubusercontent.com/hamvocke/dotfiles/master/tmux/.tmux.conf -> now install using STOW
# wget https://raw.githubusercontent.com/hamvocke/dotfiles/master/tmux/tmux_colors.sh
# chmod +x tmux_colors.sh
# ./tmux_colors.sh

printf '\n============================================================\n'
printf '[+] install digall\n'
printf '============================================================\n\n'
sleep $s
wget https://raw.githubusercontent.com/FreedomBen/digall/main/digall && chmod +x digall
# installs an automated script for dig
# Ref:- https://github.com/FreedomBen/digall
# Use :- ./digall example.com

if [[ 1 -eq 2 ]]; then    # Block comment start
printf '\n============================================================\n'
printf '[+]  Upload standard .bash_aliases & upgrades to .bashrc. \n'
printf '============================================================\n\n'
sleep $s
wget https://raw.githubusercontent.com/leighton-0/.dotfiles/main/.bash_aliases      # Upload my standard aliases file
wget https://raw.githubusercontent.com/leighton-0/.dotfiles/main/.bash_functions

fi                        # Block comment end

printf '\n============================================================\n'
printf '[+]  Make additions to .bashrc. \n'
printf '============================================================\n\n'
sleep $s

if [ ! -f ~/.bashrc.bak ]; then                                                      # Check if bashrc.bak has already been copied. If yes then skip
    cp ~/.bashrc ~/.bashrc.bak                                             # bak Up bashrc incase I fuck it up
fi
cat << "EOF" >>.bashrc                                                                #Add pointer to new .bash_aliases
if [ -f ~/.bash_aliases ]; then
. ~/.bash_aliases
fi
if [ -f ~/.bash_functions ]; then
. ~/.bash_functions
fi
PS1="SHELL:${SHLVL} \W\$ "
export PS1
# Color Info

export PATH="$PATH:.bash_aliases"

EOF




. .bashrc && . .bash_aliases                                                     #source .bashrc & .bash_aliases

printf '\n============================================================\n'
printf '[+]  Install nano text editor from binaries. \n'
printf '============================================================\n\n'
sleep $s
wget https://www.nano-editor.org/dist/v7/nano-7.2.tar.gz
tar -zxvf nano-7.2.tar.gz
cd nano-7.2
sudo apt install libncurses-dev
./configure
make
make install
# set up colour text ref:- https://askubuntu.com/questions/90013/how-do-i-enable-syntax-highlighting-in-nano
find /usr/share/nano/ -iname "*.nanorc" -exec echo include {} \; >> ~/.nanorc

printf '\n============================================================\n'
printf '[+]  Install python & PIP. \n'
printf '============================================================\n\n'
sleep $s
#     python3 seems ot be installed by default on debian but not pip3 it seems!!
# apt-get install python3.11.2
#     get error ==> "error: externally-managed-environment" when try & install pip. rectify with:-
cd /usr/lib/python3.11
rm EXTERNALLY-MANAGED
cd ~
apt install python3-pip

printf '\n============================================================\n'
printf '[+]  Install docker \n'
print '[+] link --> https://docs.docker.com/engine/install/debian/#install-using-the-repository \n'
printf '============================================================\n\n'
sleep $s
# Add Docker's official GPG key:
apt-get update
apt-get install ca-certificates curl gnupg
install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
chmod a+r /etc/apt/keyrings/docker.asc
# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
apt-get update
# install docker package
apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
printf '\n\n'
printf '**********\n'
printf 'Verify that the installation is successful by running the hello-world image:'
docker run hello-world
printf '**********\n'
printf '\n\n'
sleep 5

printf '\n============================================================\n'
printf '[+]  Install golang 1.21.1 \n'
printf '============================================================\n\n'
sleep $s
apt-get update
wget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
tar -xvf go1.21.0.linux-amd64.tar.gz
mv go /usr/local
export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
source ~/.profile
# ref:- https://royzsec.medium.com/install-go-1-21-0-in-ubuntu-22-04-2-in-5-minutes-468a5330c64e

printf '\n============================================================\n'
printf '[+]  Install projectdiscovery subfinder \n'
printf '============================================================\n\n'
sleep $s
go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
echo export PATH=$PATH:$HOME/go/bin >> $home/.bashrc
source $home/.bashrc

printf '\n============================================================\n'
printf '[+]  Install hakoriginfinder\n'
printf '============================================================\n\n'

go install github.com/hakluke/hakoriginfinder@latest
apt install prips -y

printf '\n============================================================\n'
printf '[+]  Install WPScan \n'
printf '============================================================\n\n'
sleep $s
apt install build-essential libcurl4-openssl-dev libxml2 libxml2-dev libxslt1-dev ruby-dev  libgmp-dev zlib1g-dev -y
gem install wpscan                                  #install wpscan

printf '\n============================================================\n'
printf '[+]  Install Proxychains ref'- https://github.com/SagaOfAGuy/proxychains-config/tree/main \n'
printf '============================================================\n\n'
sleep $s
wget https://raw.githubusercontent.com/leighton-0/DigitalOcean_Droplet_Setup/main/proxychains_config.sh
chmod +x proxychains_config.sh
./proxychains_config.sh

printf '\n============================================================\n'
printf '[+]  cp nse scripts & themes & plugin from https://github.com/hackertarget/nmap-nse-scripts \n'
printf '============================================================\n\n'
sleep $s
mkdir nmap-nse-scripts
cd nmap-nse-scripts/
wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/hostmap-hackertarget.nse
wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/http-wordpress-info.nse
wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/http-wordpress-plugins.nse
wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/http-wordpress-themes.nse
wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/wp-plugins.lst
wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/wp-themes.lst
cp ~/nmap-nse-scripts/hostmap-hackertarget.nse /usr/share/nmap/scripts
cp ~/nmap-nse-scripts/http-wordpress-info.nse /usr/share/nmap/scripts
cp ~/nmap-nse-scripts/http-wordpress-plugins.nse /usr/share/nmap/scripts
cp ~/nmap-nse-scripts/http-wordpress-themes.nse /usr/share/nmap/scripts
cp ~/nmap-nse-scripts/wp-plugins.lst /usr/share/nmap/nselib/data/
cp ~/nmap-nse-scripts/wp-themes.lst /usr/share/nmap/nselib/data/

<<SHELL_MULTI_LINE_COMMENTS    # problem with the following - need sorting

printf '\n============================================================\n'
printf '[+]  Upgrade DigitalOcean Metrics Agent \n'
printf '============================================================\n\n'
sleep $s
# Ref https://docs.digitalocean.com/products/monitoring/how-to/upgrade-legacy-agent/
# Uninstall the legacy metrics agent.
apt purge do-agent -y
# Install the current metrics agent
curl -sSL https://repos.insights.digitalocean.com/install.sh -o /tmp/install.sh
# run the installation using Bash:
y | bash /tmp/install.sh

ln -s ~/mycode/repos/.dotfiles/.bash_functions .bash_functions
ln -s ~/mycode/repos/.dotfiles/.bash_aliases .bash_aliases
ln -s ~/mycode/repos/My_Randon_Scripts/repo_sync.sh repo_sync.sh

SHELL_MULTI_LINE_COMMENTS

# source ~/.bashrc && source ~/.bash_aliases

mkdir mycode
cd mycode
mkdir repos
cd repos
git clone https://github.com/leighton-0/My_Random_Scripts
git clone https://github.com/leighton-0/.dotfiles
cd .dotfile
git re­mote set-url ori­gin git@github.com:leighton-0/.dot­files.git
# Note  Need ot set up ssh keys for github ********************************
cd ~

printf '\n============================================================\n'
printf '[+]  Install linkes to dotfiles using STOW \n'
printf '============================================================\n\n'
sleep $s
# This script will Stow all the dotfiles located in the ~/dotfiles folder.
# The -R flag is used to force a 'restow' which will remove any existing symlinks before attempting to Stow.

echo "Stowing Dotfiles...";

cd ~/.dotfiles
for file in ~/dotfiles/*; do
  # Only run Stow on the directories in the dotfiles folder and not the individual files.
  # Using 'basename' strips the filepath from the directory name. 
  if [ -d ${file} ]; then
    stow -R $(basename $file)
    echo "$(basename $file) stowed."; 
  fi
done

# Return back to the your PWD from before you ran the script
cd ~- 

echo 'All stowed';
sleep $s

printf '\n============================================================\n'
printf '[+]  Generate SSH key for github\n'
printf '============================================================\n\n'
sleep $s
ssh-keygen -t rsa -b 4096 -C "leighton@clucas.xxx"


echo "THE END OF THE SCRIPT"
sleep $s
sleep $s

