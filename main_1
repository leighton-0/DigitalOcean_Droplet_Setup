#!/bin/bash
# icons
# ‚ùå‚è≥üíÄüéâ ‚ÑπÔ∏è ‚ö†Ô∏è üöÄ ‚úÖ ‚ôª üöÆ üõ° üîß  ‚öô 


#######################################################################
##             DigitalOcean Droplet - Basic Set Up Script           ##
#######################################################################
# To loginto a droplet from WSL ==> ssh root@<IP>

# to install:-
#   need to first install curl ==> apt install curl
#   then:-
#   curl -k -s https://raw.githubusercontent.com/leighton-0/DigitalOcean_Droplet_Setup/main/main_1 | bash
#   curl -k -s https://raw.githubusercontent.com/leighton-0/DigitalOcean_Droplet_Setup/main/main_1 | bash -s -- arg1 arg2 etc
#       -s --> True if file exists and has a size greater than zero.

# Used for debugging
set -x
PS4='$(tput setaf 9)$(printf "%-12s\\t%.3fs\\t@line\\t%-10s" $(date +%T) $(echo $(date "+%s.%3N")-'$(date "+%s.%3N")' | bc ) $LINENO)$(tput sgr 0)'
#   ref: https://spencersmolen.com/debugging-bash/
# set colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE="\033[01;34m" # Heading
NO_COLOR='\033[0m'
CLEAR_LINE='\r\033[K'
BOLD="\033[01;01m" # Highlight
RESET="\033[00m" # Normal

s=4                          # Slows scritpt down so you can see whats going on

# verify running as root
if [[ "${EUID}" -ne 0 ]]; then
  echo -e ' '${RED}'[!]'${RESET}" This script must be ${RED}run as root${RESET}" 1>&2
  echo -e ' '${RED}'[!]'${RESET}" Quitting..." 1>&2
  exit 1
fi

# verify argument
if [ $# -eq 0 ]
  then
    echo "${RED}No arguments supplied${RESET}"1>&2
else
  echo -e "  üöÄ ${RED}Starting Droplet setup script${RESET}"
fi

sleep $s

test_fun() {
echo "test function working Ok"
}

compute_start_time() {
    start_time=$(date +%s)
    echo "\n\n Install started - $start_time \n" > script.log
}

apt_package_install() {
    echo "\n [+] installing $1 via apt\n" >> script.log
    apt install -y -q $1 >> script.log 2>>script_error.log
}

system_update() {
printf '\n============================================================\n'
printf '   ‚è≥ Updating System\n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
apt update && apt upgrade -y && apt autoremove -y -qq >> script.log 2>>script_error.log    # what is -qq doing?
}
install_misc() {
printf '\n============================================================\n'
printf '    ‚è≥ Install Misc\n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
apt install wget -y >> script.log 2>>script_error.log
apt install ruby -y >> script.log 2>>script_error.log
apt install git -y >> script.log 2>>script_error.log
apt install build-essential libcurl4-openssl-dev libxml2 libxml2-dev libxslt1-dev ruby-dev  libgmp-dev zlib1g-dev -y >> script.log 2>>script_error.log
apt install nmap -y >> script.log 2>>script_error.log
apt install whois -y >> script.log 2>>script_error.log
apt install dnsutils -y >> script.log 2>>script_error.log              # dig & nslookup
apt install tree -y >> script.log 2>>script_error.log
apt install figlet toilet -y >> script.log 2>>script_error.log           # install figlet for banners
apt install neofetch -y >> script.log 2>>script_error.log
apt install cmatrix -y >> script.log 2>>script_error.log
}

install_tmux() {
printf '\n============================================================\n'
printf '   ‚è≥ Install tmux ref & custom config https://github.com/hamvocke/dotfiles/tree/master/tmux\n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
apt install tmux -y -q >> script.log 2>>script_error.log
# wget https://raw.githubusercontent.com/hamvocke/dotfiles/master/tmux/.tmux.conf -> now install using STOW
# wget https://raw.githubusercontent.com/hamvocke/dotfiles/master/tmux/tmux_colors.sh
# chmod +x tmux_colors.sh
# ./tmux_colors.sh
}

install_digall() {
printf '\n============================================================\n'
printf '    ‚è≥ install digall\n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
wget https://raw.githubusercontent.com/FreedomBen/digall/main/digall && chmod +x digall
# installs an automated script for dig
# Ref:- https://github.com/FreedomBen/digall
# Use :- ./digall example.com
}

if [[ 1 -eq 2 ]]; then    # Block comment start
printf '\n============================================================\n'
printf '     Upload standard .bash_aliases & upgrades to .bashrc. \n'
printf '============================================================\n\n'
sleep $s
wget https://raw.githubusercontent.com/leighton-0/.dotfiles/main/.bash_aliases      # Upload my standard aliases file
wget https://raw.githubusercontent.com/leighton-0/.dotfiles/main/.bash_functions
fi                        # Block comment end

add_to_bashrc() {
printf '\n============================================================\n'
printf '[+]  ‚è≥ Make additions to .bashrc. \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s

if [ ! -f ~/.bashrc.bak ]; then                                                      # Check if bashrc.bak has already been copied. If yes then skip
    cp ~/.bashrc ~/.bashrc.bak                                             # bak Up bashrc incase I fuck it up
fi
cat <<"EOF" >>.bashrc                    #Add pointer to new .bash_aliases
printf '\n\n'
printf '================Added by me ==================================\n\n'
printf '\n'
if [ -f ~/.bash_aliases ]; then
. ~/.bash_aliases
fi

if [ -f ~/.bash_functions ]; then
. ~/.bash_functions
fi

if [ -f ~/.env ]; then
. ~/.env
fi

PS1="SHELL:${SHLVL} \W\$ "
export PS1
EOF
}
# . .bashrc && . .bash_aliases                                                     #source .bashrc & .bash_aliases

install_nano() {
printf '\n============================================================\n'
printf '[+]  ‚è≥ Install nano text editor from binaries. \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
wget https://www.nano-editor.org/dist/v7/nano-7.2.tar.gz
tar -zxvf nano-7.2.tar.gz
cd nano-7.2
sudo apt install libncurses-dev
./configure
make
make install
# set up colour text ref:- https://askubuntu.com/questions/90013/how-do-i-enable-syntax-highlighting-in-nano
find /usr/share/nano/ -iname "*.nanorc" -exec echo include {} \; >> ~/.nanorc
}

install_python() {
printf '\n============================================================\n'
printf '  ‚è≥ Install python & PIP. \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
#     python3 seems ot be installed by default on debian but not pip3 it seems!!
# apt-get install python3.11.2
#     get error ==> "error: externally-managed-environment" when try & install pip. rectify with:-
cd /usr/lib/python3.11
rm EXTERNALLY-MANAGED
cd ~
apt install python3-pip -y -q >> script.log 2>>script_error.log
}

install_docker() {
printf '\n============================================================\n'
printf ' ‚è≥  Install docker \n' | tee -a script.log
print '[+] link --> https://docs.docker.com/engine/install/debian/#install-using-the-repository \n'
printf '============================================================\n\n'
sleep $s
# Add Docker's official GPG key:
apt-get update
apt-get install ca-certificates curl gnupg
install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
chmod a+r /etc/apt/keyrings/docker.asc
# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
apt-get update
# install docker package
apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
printf '\n\n'
printf '**********\n'
printf 'Verify that the installation is successful by running the hello-world image:'
docker run hello-world
printf '**********\n'
printf '\n\n'
sleep 5
}

install_golang() {
printf '\n============================================================\n'
printf ' ‚è≥  Install golang 1.21.1 \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
apt-get update
wget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
tar -xvf go1.21.0.linux-amd64.tar.gz
mv go /usr/local
export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
source ~/.profile
# ref:- https://royzsec.medium.com/install-go-1-21-0-in-ubuntu-22-04-2-in-5-minutes-468a5330c64e
}

install_PD_subfinder() {
printf '\n============================================================\n'
printf ' ‚è≥  Install projectdiscovery subfinder \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
echo export PATH=$PATH:$HOME/go/bin >> $home/.bashrc
source $home/.bashrc
}

install_hakoriginfiinder() {
printf '\n============================================================\n'
printf ' ‚è≥  Install hakoriginfinder\n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
go install github.com/hakluke/hakoriginfinder@latest
apt install prips -y
}

install_WPScan() {
printf '\n============================================================\n'
printf ' ‚è≥  Install WPScan \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
apt install build-essential libcurl4-openssl-dev libxml2 libxml2-dev libxslt1-dev ruby-dev  libgmp-dev zlib1g-dev -y
gem install wpscan                                  #install wpscan
}

install_proxychains() {
printf '\n============================================================\n'
printf ' ‚è≥  Install Proxychains ref'- https://github.com/SagaOfAGuy/proxychains-config/tree/main \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
wget https://raw.githubusercontent.com/leighton-0/DigitalOcean_Droplet_Setup/main/proxychains_config.sh
chmod +x proxychains_config.sh
./proxychains_config.sh
}

install_nse_scripts() {
printf '\n============================================================\n'
printf '  ‚è≥  cp nse scripts & themes & plugin from https://github.com/hackertarget/nmap-nse-scripts \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
mkdir nmap-nse-scripts
cd nmap-nse-scripts/
wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/hostmap-hackertarget.nse
wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/http-wordpress-info.nse
wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/http-wordpress-plugins.nse
wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/http-wordpress-themes.nse
wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/wp-plugins.lst
wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/wp-themes.lst
cp ~/nmap-nse-scripts/hostmap-hackertarget.nse /usr/share/nmap/scripts
cp ~/nmap-nse-scripts/http-wordpress-info.nse /usr/share/nmap/scripts
cp ~/nmap-nse-scripts/http-wordpress-plugins.nse /usr/share/nmap/scripts
cp ~/nmap-nse-scripts/http-wordpress-themes.nse /usr/share/nmap/scripts
cp ~/nmap-nse-scripts/wp-plugins.lst /usr/share/nmap/nselib/data/
cp ~/nmap-nse-scripts/wp-themes.lst /usr/share/nmap/nselib/data/
}

install_DO_Metrics_Agent() {
if [ 1 == 0 ]; then    # problem with the following - need sorting
printf '\n============================================================\n'
printf ' ‚è≥  Upgrade DigitalOcean Metrics Agent \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
# Ref https://docs.digitalocean.com/products/monitoring/how-to/upgrade-legacy-agent/
# Uninstall the legacy metrics agent.
apt purge do-agent -y
# Install the current metrics agent
curl -sSL https://repos.insights.digitalocean.com/install.sh -o /tmp/install.sh
# run the installation using Bash:
y | bash /tmp/install.sh
}

setup_synlincs() {
ln -s ~/mycode/repos/.dotfiles/.bash_functions .bash_functions
ln -s ~/mycode/repos/.dotfiles/.bash_aliases .bash_aliases
ln -s ~/mycode/repos/My_Randon_Scripts/repo_sync.sh repo_sync.sh
}
fi      SHELL_MULTI_LINE_COMMENTS

clone_repos() {
printf '\n============================================================\n'
printf ' ‚è≥  clone github repos to theit respective directories \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
mkdir -p ~/mycode/repos
cd !$
git clone https://github.com/leighton-0/My_Random_Scripts
git clone https://github.com/leighton-0/cheat_sheets
git clone https://github.com/leighton-0/.dotfiles
cd ~/mycode/repos/.dotfile
git re¬≠mote set-url ori¬≠gin git@github.com:leighton-0/.dot¬≠files.git
cd ~/mycode/repos/My_Random_Scripts
git re¬≠mote set-url ori¬≠gin git@github.com:leighton-0/My_Random_Scripts
cd ~/mycode/repos/cheat_sheets
git re¬≠mote set-url ori¬≠gin git@github.com:leighton-0/cheat_sheets
# Note  Need ot set up ssh keys for github ********************************
cd ~
wget
echo "enter the password"
read -s password
openssl enc -aes-256-cbc -d -in ~/mycode/repos/my_random_scripts .env.enc -out ~/mycode/.env -k $password
echo " .env file decrypted successfully & placed in ~/mycode dir"
}

setup_stow() {
printf '\n============================================================\n'
printf ' ‚è≥  Install linkes to dotfiles using STOW \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
# This script will Stow all the dotfiles located in the ~/dotfiles folder.
# The -R flag is used to force a 'restow' which will remove any existing symlinks before attempting to Stow.

echo "Stowing Dotfiles...";
sleep $s
cd ~/.dotfiles
for file in ~/dotfiles/*; do
  # Only run Stow on the directories in the dotfiles folder and not the individual files.
  # Using 'basename' strips the filepath from the directory name. 
  if [ -d ${file} ]; then
    stow -R $(basename $file)
    echo "$(basename $file) stowed."; 
  fi
ln -sf ~/mycode/.env ~/.env    # manually synlinc to .env decrypted file

# Return back to the your PWD from before you ran the script
cd ~/

echo "All stowed"
sleep $s
printf '\n\n'
}

gen_SSH_key() {
printf '\n============================================================\n'
printf ' ‚è≥  Generate SSH key for github\n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
ssh-keygen -t rsa -b 4096 -C "leighton@clucas.xxx"
printf ' ssk key generated - copy to github
}

compute_finish_time(){
    finish_time=$(date +%s)
    echo -e "  ‚åõ Time (roughly) taken: ${YELLOW}$(( $(( finish_time - start_time ))  )) seconds${RESET}"
    echo "\n\n Install completed - $finish_time \n" >> script.log
}
main() {
    compute_start_time
    apt_package_install
    system_update
    test_fun
    install_misc
#    install_tmux
#    install_digall
#    add_to_bashrc
#    install_nano
#    install_python
#    install_docker
#   install_golang
#    install_PD_subfinder
#    install_hakoriginfiinder
#    install_WPScan
#   install_proxychains
#   install_nse_scripts
 #   install_DO_Metrics_Agent
#  setup_synlincs
 #   clone_repos
  #  setup_stow
  # gen_SSH_key
 compute_finish_time
}

main

echo "  ‚úÖ THE END OF THE SCRIPT"
sleep ${s}

